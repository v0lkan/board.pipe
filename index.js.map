{"version":3,"sources":["index.es6"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;oBAiBc,MAAM;;kBACF,IAAI;;oBAChB,MAAM;;wBACJ,WAAW;;;;0BAEe,aAAa;;wBAC5C,WAAW;;;;AAE3B,IAAM,EAAE,GAAG,IAAI,CAAC;AAChB,IAAM,YAAY,GAAG,GAAG,CAAC;AACzB,IAAM,OAAO,GAAG,IAAI,CAAC;;AAErB,IAAI,MAAM,GAAG,UAZL,YAAY,GAYO,CAAC;AAC5B,IAAI,EAAE,GAAG,2BAAS,MAAM,CAAC,CAAC;;AAE1B,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;;AAEvB,IAAI,UAAU,GAAG,EAAE,CAAC;;AAEpB,IAAI,IAAI,GAAG,SAAP,IAAI,GAAS,EAAE,CAAC;;AAEpB,IAAI,aAAa,GAAG,SAAhB,aAAa,CAAI,OAAO,EAAK;AAC7B,cAAU,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,OAAK,OAAO,CAAG,CAAC;CAC9C,CAAC;;AAEF,IAAI,KAAI,GAAG,cAAC,QAAQ,EAAK;AACrB,YAAQ,CAAC,OAAO,CAAC,UAAA,OAAO;eAAI,aAAa,CAAC,OAAO,CAAC;KAAA,CAAC,CAAC;;AAEpD,oBAvBI,gBAAgB,EAuBP,UAAC,IAAI,EAAK;AACnB,YAAI,CAAC,IAAI,EAAE;AAAC,mBAAO;SAAC;;AAEpB,YAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACzC,YAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;;AAE3B,YAAI,CAAC,MAAM,EAAE;AAAC,mBAAO;SAAC;;AAEtB,YAAI,UAAU,CAAC,MAAM,CAAC,EAAE;AACpB,+DAA0B,MAAM,OAAI,CAAC;;AAErC,sBAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SACrD;KACJ,CAAC,CAAC;;;;AAIH,SAAI,GAAG,IAAI,CAAC;CACf,CAAC;;;;QAIM,IAAI,GAAJ,KAAI","file":"index.js","sourcesContent":["'use strict';\n\n/*\n *  ______                     _________\n *  ___  /_____________ _____________  /\n *  __  __ \\  __ \\  __ `/_  ___/  __  /\n *  _  /_/ / /_/ / /_/ /_  /   / /_/ /\n *  /_.___/\\____/\\__,_/ /_/    \\__,_/\n *      a minimalist dashboard and monitoring solution.\n *\n * This program is distributed under the terms of the MIT license.\n * Please see `LICENSE.md` file for details.\n *\n * Send your comments and suggestions toâ€¦\n * <https://github.com/v0lkan/board/issues>\n */\n\nimport {createServer} from 'http';\nimport {exists, readFile} from 'fs';\nimport {join} from 'path';\nimport socketIo from 'socket.io';\n\nimport {createPullSocket as createSocket} from 'board.queue';\nimport log from 'board.log';\n\nconst OK = 'OK';\nconst HTTP_SUCCESS = 200;\nconst IO_PORT = 4242;\n\nlet server = createServer();\nlet io = socketIo(server);\n\nserver.listen(IO_PORT);\n\nlet namespaces = {};\n\nlet noop = () => {};\n\nlet createChannel = (channel) => {\n    namespaces[channel] = io.of(`/${channel}`);\n};\n\nlet init = (channels) => {\n    channels.forEach(channel => createChannel(channel));\n\n    createSocket((data) => {\n        if (!data) {return;}\n\n        let parsed = JSON.parse(data.toString());\n        let target = parsed.target;\n\n        if (!target) {return;}\n\n        if (namespaces[target]) {\n            log(`Emitting data for \"${target}\"`);\n\n            namespaces[target].emit('board', data.toString());\n        }\n    });\n\n    // init is like a constructor function; or \"like\" a static initializer;\n    // therefore it should be called only once.\n    init = noop;\n};\n\n// TODO: notify user when navigating to a board url and the board is missing.\n\nexport {init};\n"]}